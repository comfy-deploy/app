/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WaitlistRouteImport } from './routes/waitlist'
import { Route as UsageRouteImport } from './routes/usage'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SecretsRouteImport } from './routes/secrets'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as OrgNotFoundRouteImport } from './routes/org-not-found'
import { Route as OnboardingCallRouteImport } from './routes/onboarding-call'
import { Route as ModelsRouteImport } from './routes/models'
import { Route as ExploreRouteImport } from './routes/explore'
import { Route as CreateOrgRouteImport } from './routes/create-org'
import { Route as AssetsRouteImport } from './routes/assets'
import { Route as ApiKeysRouteImport } from './routes/api-keys'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkflowsIndexRouteImport } from './routes/workflows/index'
import { Route as SessionsIndexRouteImport } from './routes/sessions/index'
import { Route as OrganizationProfileIndexRouteImport } from './routes/organization-profile/index'
import { Route as MachinesIndexRouteImport } from './routes/machines/index'
import { Route as AnalyticsIndexRouteImport } from './routes/analytics/index'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as SessionsSessionIdIndexRouteImport } from './routes/sessions/$sessionId/index'
import { Route as OrganizationProfileOrganizationMembersIndexRouteImport } from './routes/organization-profile/organization-members/index'
import { Route as MachinesMachineIdIndexRouteImport } from './routes/machines/$machineId/index'
import { Route as WorkflowsWorkflowIdViewRouteImport } from './routes/workflows/$workflowId/$view'
import { Route as ShareUserSlugRouteImport } from './routes/share/$user/$slug'
import { Route as MachinesMachineIdFilesRouteImport } from './routes/machines/$machineId/files'
import { Route as MachinesMachineIdActivityRouteImport } from './routes/machines/$machineId/activity'
import { Route as MachinesMachineIdMachineVersionIdRouteImport } from './routes/machines/$machineId/$machineVersionId'
import { Route as MachinesMachineIdHistoryIndexRouteImport } from './routes/machines/$machineId/history/index'
import { Route as AuthRequestRequestIdIndexRouteImport } from './routes/auth/request/$requestId/index'
import { Route as ShareWorkflowUserSlugRouteImport } from './routes/share/workflow/$user/$slug'
import { Route as SharePlaygroundUserSlugRouteImport } from './routes/share/playground/$user/$slug'

const WaitlistRoute = WaitlistRouteImport.update({
  id: '/waitlist',
  path: '/waitlist',
  getParentRoute: () => rootRouteImport,
} as any)
const UsageRoute = UsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SecretsRoute = SecretsRouteImport.update({
  id: '/secrets',
  path: '/secrets',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgNotFoundRoute = OrgNotFoundRouteImport.update({
  id: '/org-not-found',
  path: '/org-not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingCallRoute = OnboardingCallRouteImport.update({
  id: '/onboarding-call',
  path: '/onboarding-call',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelsRoute = ModelsRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRoute = ExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateOrgRoute = CreateOrgRouteImport.update({
  id: '/create-org',
  path: '/create-org',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsRoute = AssetsRouteImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiKeysRoute = ApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowsIndexRoute = WorkflowsIndexRouteImport.update({
  id: '/workflows/',
  path: '/workflows/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/workflows/index.lazy').then((d) => d.Route),
)
const SessionsIndexRoute = SessionsIndexRouteImport.update({
  id: '/sessions/',
  path: '/sessions/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationProfileIndexRoute =
  OrganizationProfileIndexRouteImport.update({
    id: '/organization-profile/',
    path: '/organization-profile/',
    getParentRoute: () => rootRouteImport,
  } as any)
const MachinesIndexRoute = MachinesIndexRouteImport.update({
  id: '/machines/',
  path: '/machines/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsIndexRoute = AnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/analytics/index.lazy').then((d) => d.Route),
)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsSessionIdIndexRoute = SessionsSessionIdIndexRouteImport.update({
  id: '/sessions/$sessionId/',
  path: '/sessions/$sessionId/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationProfileOrganizationMembersIndexRoute =
  OrganizationProfileOrganizationMembersIndexRouteImport.update({
    id: '/organization-profile/organization-members/',
    path: '/organization-profile/organization-members/',
    getParentRoute: () => rootRouteImport,
  } as any)
const MachinesMachineIdIndexRoute = MachinesMachineIdIndexRouteImport.update({
  id: '/machines/$machineId/',
  path: '/machines/$machineId/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowsWorkflowIdViewRoute = WorkflowsWorkflowIdViewRouteImport.update({
  id: '/workflows/$workflowId/$view',
  path: '/workflows/$workflowId/$view',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/workflows/$workflowId/$view.lazy').then((d) => d.Route),
)
const ShareUserSlugRoute = ShareUserSlugRouteImport.update({
  id: '/share/$user/$slug',
  path: '/share/$user/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const MachinesMachineIdFilesRoute = MachinesMachineIdFilesRouteImport.update({
  id: '/machines/$machineId/files',
  path: '/machines/$machineId/files',
  getParentRoute: () => rootRouteImport,
} as any)
const MachinesMachineIdActivityRoute =
  MachinesMachineIdActivityRouteImport.update({
    id: '/machines/$machineId/activity',
    path: '/machines/$machineId/activity',
    getParentRoute: () => rootRouteImport,
  } as any)
const MachinesMachineIdMachineVersionIdRoute =
  MachinesMachineIdMachineVersionIdRouteImport.update({
    id: '/machines/$machineId/$machineVersionId',
    path: '/machines/$machineId/$machineVersionId',
    getParentRoute: () => rootRouteImport,
  } as any)
const MachinesMachineIdHistoryIndexRoute =
  MachinesMachineIdHistoryIndexRouteImport.update({
    id: '/machines/$machineId/history/',
    path: '/machines/$machineId/history/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthRequestRequestIdIndexRoute =
  AuthRequestRequestIdIndexRouteImport.update({
    id: '/auth/request/$requestId/',
    path: '/auth/request/$requestId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ShareWorkflowUserSlugRoute = ShareWorkflowUserSlugRouteImport.update({
  id: '/share/workflow/$user/$slug',
  path: '/share/workflow/$user/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const SharePlaygroundUserSlugRoute = SharePlaygroundUserSlugRouteImport.update({
  id: '/share/playground/$user/$slug',
  path: '/share/playground/$user/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/assets': typeof AssetsRoute
  '/create-org': typeof CreateOrgRoute
  '/explore': typeof ExploreRoute
  '/models': typeof ModelsRoute
  '/onboarding-call': typeof OnboardingCallRoute
  '/org-not-found': typeof OrgNotFoundRoute
  '/pricing': typeof PricingRoute
  '/secrets': typeof SecretsRoute
  '/settings': typeof SettingsRoute
  '/usage': typeof UsageRoute
  '/waitlist': typeof WaitlistRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/machines': typeof MachinesIndexRoute
  '/organization-profile': typeof OrganizationProfileIndexRoute
  '/sessions': typeof SessionsIndexRoute
  '/workflows': typeof WorkflowsIndexRoute
  '/machines/$machineId/$machineVersionId': typeof MachinesMachineIdMachineVersionIdRoute
  '/machines/$machineId/activity': typeof MachinesMachineIdActivityRoute
  '/machines/$machineId/files': typeof MachinesMachineIdFilesRoute
  '/share/$user/$slug': typeof ShareUserSlugRoute
  '/workflows/$workflowId/$view': typeof WorkflowsWorkflowIdViewRoute
  '/machines/$machineId': typeof MachinesMachineIdIndexRoute
  '/organization-profile/organization-members': typeof OrganizationProfileOrganizationMembersIndexRoute
  '/sessions/$sessionId': typeof SessionsSessionIdIndexRoute
  '/share/playground/$user/$slug': typeof SharePlaygroundUserSlugRoute
  '/share/workflow/$user/$slug': typeof ShareWorkflowUserSlugRoute
  '/auth/request/$requestId': typeof AuthRequestRequestIdIndexRoute
  '/machines/$machineId/history': typeof MachinesMachineIdHistoryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/assets': typeof AssetsRoute
  '/create-org': typeof CreateOrgRoute
  '/explore': typeof ExploreRoute
  '/models': typeof ModelsRoute
  '/onboarding-call': typeof OnboardingCallRoute
  '/org-not-found': typeof OrgNotFoundRoute
  '/pricing': typeof PricingRoute
  '/secrets': typeof SecretsRoute
  '/settings': typeof SettingsRoute
  '/usage': typeof UsageRoute
  '/waitlist': typeof WaitlistRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/machines': typeof MachinesIndexRoute
  '/organization-profile': typeof OrganizationProfileIndexRoute
  '/sessions': typeof SessionsIndexRoute
  '/workflows': typeof WorkflowsIndexRoute
  '/machines/$machineId/$machineVersionId': typeof MachinesMachineIdMachineVersionIdRoute
  '/machines/$machineId/activity': typeof MachinesMachineIdActivityRoute
  '/machines/$machineId/files': typeof MachinesMachineIdFilesRoute
  '/share/$user/$slug': typeof ShareUserSlugRoute
  '/workflows/$workflowId/$view': typeof WorkflowsWorkflowIdViewRoute
  '/machines/$machineId': typeof MachinesMachineIdIndexRoute
  '/organization-profile/organization-members': typeof OrganizationProfileOrganizationMembersIndexRoute
  '/sessions/$sessionId': typeof SessionsSessionIdIndexRoute
  '/share/playground/$user/$slug': typeof SharePlaygroundUserSlugRoute
  '/share/workflow/$user/$slug': typeof ShareWorkflowUserSlugRoute
  '/auth/request/$requestId': typeof AuthRequestRequestIdIndexRoute
  '/machines/$machineId/history': typeof MachinesMachineIdHistoryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/assets': typeof AssetsRoute
  '/create-org': typeof CreateOrgRoute
  '/explore': typeof ExploreRoute
  '/models': typeof ModelsRoute
  '/onboarding-call': typeof OnboardingCallRoute
  '/org-not-found': typeof OrgNotFoundRoute
  '/pricing': typeof PricingRoute
  '/secrets': typeof SecretsRoute
  '/settings': typeof SettingsRoute
  '/usage': typeof UsageRoute
  '/waitlist': typeof WaitlistRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/machines/': typeof MachinesIndexRoute
  '/organization-profile/': typeof OrganizationProfileIndexRoute
  '/sessions/': typeof SessionsIndexRoute
  '/workflows/': typeof WorkflowsIndexRoute
  '/machines/$machineId/$machineVersionId': typeof MachinesMachineIdMachineVersionIdRoute
  '/machines/$machineId/activity': typeof MachinesMachineIdActivityRoute
  '/machines/$machineId/files': typeof MachinesMachineIdFilesRoute
  '/share/$user/$slug': typeof ShareUserSlugRoute
  '/workflows/$workflowId/$view': typeof WorkflowsWorkflowIdViewRoute
  '/machines/$machineId/': typeof MachinesMachineIdIndexRoute
  '/organization-profile/organization-members/': typeof OrganizationProfileOrganizationMembersIndexRoute
  '/sessions/$sessionId/': typeof SessionsSessionIdIndexRoute
  '/share/playground/$user/$slug': typeof SharePlaygroundUserSlugRoute
  '/share/workflow/$user/$slug': typeof ShareWorkflowUserSlugRoute
  '/auth/request/$requestId/': typeof AuthRequestRequestIdIndexRoute
  '/machines/$machineId/history/': typeof MachinesMachineIdHistoryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-keys'
    | '/assets'
    | '/create-org'
    | '/explore'
    | '/models'
    | '/onboarding-call'
    | '/org-not-found'
    | '/pricing'
    | '/secrets'
    | '/settings'
    | '/usage'
    | '/waitlist'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/analytics'
    | '/machines'
    | '/organization-profile'
    | '/sessions'
    | '/workflows'
    | '/machines/$machineId/$machineVersionId'
    | '/machines/$machineId/activity'
    | '/machines/$machineId/files'
    | '/share/$user/$slug'
    | '/workflows/$workflowId/$view'
    | '/machines/$machineId'
    | '/organization-profile/organization-members'
    | '/sessions/$sessionId'
    | '/share/playground/$user/$slug'
    | '/share/workflow/$user/$slug'
    | '/auth/request/$requestId'
    | '/machines/$machineId/history'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-keys'
    | '/assets'
    | '/create-org'
    | '/explore'
    | '/models'
    | '/onboarding-call'
    | '/org-not-found'
    | '/pricing'
    | '/secrets'
    | '/settings'
    | '/usage'
    | '/waitlist'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/analytics'
    | '/machines'
    | '/organization-profile'
    | '/sessions'
    | '/workflows'
    | '/machines/$machineId/$machineVersionId'
    | '/machines/$machineId/activity'
    | '/machines/$machineId/files'
    | '/share/$user/$slug'
    | '/workflows/$workflowId/$view'
    | '/machines/$machineId'
    | '/organization-profile/organization-members'
    | '/sessions/$sessionId'
    | '/share/playground/$user/$slug'
    | '/share/workflow/$user/$slug'
    | '/auth/request/$requestId'
    | '/machines/$machineId/history'
  id:
    | '__root__'
    | '/'
    | '/api-keys'
    | '/assets'
    | '/create-org'
    | '/explore'
    | '/models'
    | '/onboarding-call'
    | '/org-not-found'
    | '/pricing'
    | '/secrets'
    | '/settings'
    | '/usage'
    | '/waitlist'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/analytics/'
    | '/machines/'
    | '/organization-profile/'
    | '/sessions/'
    | '/workflows/'
    | '/machines/$machineId/$machineVersionId'
    | '/machines/$machineId/activity'
    | '/machines/$machineId/files'
    | '/share/$user/$slug'
    | '/workflows/$workflowId/$view'
    | '/machines/$machineId/'
    | '/organization-profile/organization-members/'
    | '/sessions/$sessionId/'
    | '/share/playground/$user/$slug'
    | '/share/workflow/$user/$slug'
    | '/auth/request/$requestId/'
    | '/machines/$machineId/history/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiKeysRoute: typeof ApiKeysRoute
  AssetsRoute: typeof AssetsRoute
  CreateOrgRoute: typeof CreateOrgRoute
  ExploreRoute: typeof ExploreRoute
  ModelsRoute: typeof ModelsRoute
  OnboardingCallRoute: typeof OnboardingCallRoute
  OrgNotFoundRoute: typeof OrgNotFoundRoute
  PricingRoute: typeof PricingRoute
  SecretsRoute: typeof SecretsRoute
  SettingsRoute: typeof SettingsRoute
  UsageRoute: typeof UsageRoute
  WaitlistRoute: typeof WaitlistRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  MachinesIndexRoute: typeof MachinesIndexRoute
  OrganizationProfileIndexRoute: typeof OrganizationProfileIndexRoute
  SessionsIndexRoute: typeof SessionsIndexRoute
  WorkflowsIndexRoute: typeof WorkflowsIndexRoute
  MachinesMachineIdMachineVersionIdRoute: typeof MachinesMachineIdMachineVersionIdRoute
  MachinesMachineIdActivityRoute: typeof MachinesMachineIdActivityRoute
  MachinesMachineIdFilesRoute: typeof MachinesMachineIdFilesRoute
  ShareUserSlugRoute: typeof ShareUserSlugRoute
  WorkflowsWorkflowIdViewRoute: typeof WorkflowsWorkflowIdViewRoute
  MachinesMachineIdIndexRoute: typeof MachinesMachineIdIndexRoute
  OrganizationProfileOrganizationMembersIndexRoute: typeof OrganizationProfileOrganizationMembersIndexRoute
  SessionsSessionIdIndexRoute: typeof SessionsSessionIdIndexRoute
  SharePlaygroundUserSlugRoute: typeof SharePlaygroundUserSlugRoute
  ShareWorkflowUserSlugRoute: typeof ShareWorkflowUserSlugRoute
  AuthRequestRequestIdIndexRoute: typeof AuthRequestRequestIdIndexRoute
  MachinesMachineIdHistoryIndexRoute: typeof MachinesMachineIdHistoryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/waitlist': {
      id: '/waitlist'
      path: '/waitlist'
      fullPath: '/waitlist'
      preLoaderRoute: typeof WaitlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/usage': {
      id: '/usage'
      path: '/usage'
      fullPath: '/usage'
      preLoaderRoute: typeof UsageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/secrets': {
      id: '/secrets'
      path: '/secrets'
      fullPath: '/secrets'
      preLoaderRoute: typeof SecretsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org-not-found': {
      id: '/org-not-found'
      path: '/org-not-found'
      fullPath: '/org-not-found'
      preLoaderRoute: typeof OrgNotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding-call': {
      id: '/onboarding-call'
      path: '/onboarding-call'
      fullPath: '/onboarding-call'
      preLoaderRoute: typeof OnboardingCallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/models': {
      id: '/models'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create-org': {
      id: '/create-org'
      path: '/create-org'
      fullPath: '/create-org'
      preLoaderRoute: typeof CreateOrgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets': {
      id: '/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-keys': {
      id: '/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflows/': {
      id: '/workflows/'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof WorkflowsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/': {
      id: '/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization-profile/': {
      id: '/organization-profile/'
      path: '/organization-profile'
      fullPath: '/organization-profile'
      preLoaderRoute: typeof OrganizationProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/': {
      id: '/machines/'
      path: '/machines'
      fullPath: '/machines'
      preLoaderRoute: typeof MachinesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/$sessionId/': {
      id: '/sessions/$sessionId/'
      path: '/sessions/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof SessionsSessionIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization-profile/organization-members/': {
      id: '/organization-profile/organization-members/'
      path: '/organization-profile/organization-members'
      fullPath: '/organization-profile/organization-members'
      preLoaderRoute: typeof OrganizationProfileOrganizationMembersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/$machineId/': {
      id: '/machines/$machineId/'
      path: '/machines/$machineId'
      fullPath: '/machines/$machineId'
      preLoaderRoute: typeof MachinesMachineIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflows/$workflowId/$view': {
      id: '/workflows/$workflowId/$view'
      path: '/workflows/$workflowId/$view'
      fullPath: '/workflows/$workflowId/$view'
      preLoaderRoute: typeof WorkflowsWorkflowIdViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/$user/$slug': {
      id: '/share/$user/$slug'
      path: '/share/$user/$slug'
      fullPath: '/share/$user/$slug'
      preLoaderRoute: typeof ShareUserSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/$machineId/files': {
      id: '/machines/$machineId/files'
      path: '/machines/$machineId/files'
      fullPath: '/machines/$machineId/files'
      preLoaderRoute: typeof MachinesMachineIdFilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/$machineId/activity': {
      id: '/machines/$machineId/activity'
      path: '/machines/$machineId/activity'
      fullPath: '/machines/$machineId/activity'
      preLoaderRoute: typeof MachinesMachineIdActivityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/$machineId/$machineVersionId': {
      id: '/machines/$machineId/$machineVersionId'
      path: '/machines/$machineId/$machineVersionId'
      fullPath: '/machines/$machineId/$machineVersionId'
      preLoaderRoute: typeof MachinesMachineIdMachineVersionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/machines/$machineId/history/': {
      id: '/machines/$machineId/history/'
      path: '/machines/$machineId/history'
      fullPath: '/machines/$machineId/history'
      preLoaderRoute: typeof MachinesMachineIdHistoryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/request/$requestId/': {
      id: '/auth/request/$requestId/'
      path: '/auth/request/$requestId'
      fullPath: '/auth/request/$requestId'
      preLoaderRoute: typeof AuthRequestRequestIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/workflow/$user/$slug': {
      id: '/share/workflow/$user/$slug'
      path: '/share/workflow/$user/$slug'
      fullPath: '/share/workflow/$user/$slug'
      preLoaderRoute: typeof ShareWorkflowUserSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/playground/$user/$slug': {
      id: '/share/playground/$user/$slug'
      path: '/share/playground/$user/$slug'
      fullPath: '/share/playground/$user/$slug'
      preLoaderRoute: typeof SharePlaygroundUserSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiKeysRoute: ApiKeysRoute,
  AssetsRoute: AssetsRoute,
  CreateOrgRoute: CreateOrgRoute,
  ExploreRoute: ExploreRoute,
  ModelsRoute: ModelsRoute,
  OnboardingCallRoute: OnboardingCallRoute,
  OrgNotFoundRoute: OrgNotFoundRoute,
  PricingRoute: PricingRoute,
  SecretsRoute: SecretsRoute,
  SettingsRoute: SettingsRoute,
  UsageRoute: UsageRoute,
  WaitlistRoute: WaitlistRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  MachinesIndexRoute: MachinesIndexRoute,
  OrganizationProfileIndexRoute: OrganizationProfileIndexRoute,
  SessionsIndexRoute: SessionsIndexRoute,
  WorkflowsIndexRoute: WorkflowsIndexRoute,
  MachinesMachineIdMachineVersionIdRoute:
    MachinesMachineIdMachineVersionIdRoute,
  MachinesMachineIdActivityRoute: MachinesMachineIdActivityRoute,
  MachinesMachineIdFilesRoute: MachinesMachineIdFilesRoute,
  ShareUserSlugRoute: ShareUserSlugRoute,
  WorkflowsWorkflowIdViewRoute: WorkflowsWorkflowIdViewRoute,
  MachinesMachineIdIndexRoute: MachinesMachineIdIndexRoute,
  OrganizationProfileOrganizationMembersIndexRoute:
    OrganizationProfileOrganizationMembersIndexRoute,
  SessionsSessionIdIndexRoute: SessionsSessionIdIndexRoute,
  SharePlaygroundUserSlugRoute: SharePlaygroundUserSlugRoute,
  ShareWorkflowUserSlugRoute: ShareWorkflowUserSlugRoute,
  AuthRequestRequestIdIndexRoute: AuthRequestRequestIdIndexRoute,
  MachinesMachineIdHistoryIndexRoute: MachinesMachineIdHistoryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
